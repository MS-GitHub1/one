pytest

与unittest的区别
1、用例的编写？支持函数
2、用例的识别？自动化识别。识别规则？目录-文件名-用例名  pytest命令行(pytest.main())
3、用例的断言？assert 表达式(结果为True,False) - 逻辑/比较/函数返回值。 unittest:self.assertXXXX
4、用例的报告？unitest/pytest --html。但是  pytest是可以集成第三方报告工具-allure
   pytest有非常丰富的插件：700+

语言写用例的用例框架共性：
1、写用例: 前置、步骤、断言、后置。 pytest如何表达前置后置？
2、运行用例：unitest、pytest    .main()
3、生成报告：
4、组织用例：筛选用例的功能？
5、运行用例时的配置：用例失败重试(unittest不自带、pytest自带)
6、数据驱动支持：unitest:ddt    pytest:参数化


pytest如何表达前置后置？(不可以与unittest、ddt共存,一山不容二虎)
unittest:  用例级别：测试类中有setup、teardown    测试类级别：测试类中有setupClass、teardownClass
pytest: fixture - 前置&后置。
        级别：1、用例会话(session)级别：接口自动化当的数据库连接。
             2、模块(.py/module)级别：
             3、测试类(class)级别
             4、测试用例(def/function)级别

        定义：一个函数包含前置和后置。
             0) 确定级别：夹心饼干到底夹什么。
             1）怎么区分前和后？ 银河:yield
             2）函数名称可以随便定义，如何识别为前置后置？
                函数前面@pytest.fixture
             3) 如果用例要使用 前置当中的变量，怎么办？
                返回用例要使用的变量。yield 返回值。
                用例调用的时候， fixture的函数名称作为用例的参数，接收它的返回值

        调用(与测试用例关联用例)：
        用例级别：
        类前面，@pytest.mark.usefixtures("fixture的函数名称")
        测试函数前面，@pytest.mark.usefixtures("fixture的函数名称")

        # conftest.py  -- 前置后置全局共享
        作用域：仅限于当前目录以及它的子孙后代目录当中的用例。
        定义各个级别的 fixture
        fixture可以继承fixture: ？？？？


        # module \ session ？？？




参数化： 实现数据驱动   @pytest.mark.parametrize("case",LD.wrong_datas)

筛选用例 ：给用例打标记。
93个人 -- 93个用例
运行：全是妹纸！ -- 40个   标记：女
1步：向pytest注册你的标记。  pytest.ini
2步：在需要标记的用例上面，打上标记。
     用例上面：@pytest.mark.标记名
3步：运行 已标记 的用例。 pytest参数：-m 标签名


==================  提问版本的总结  ==========================
fixture: 前置后置。 -- 写在一个函数里面。
         1、setup,teardown???  不是，随便定义函数名
         2、有class级别？  是的，但不仅限于。4个级别。
         3、如何知道它是一个fixture??   @pytest.fixture
         4、区分前和后？  yield
         5、与用例绑定在一起的吗？  不是。独立的。
         6、可以共享吗？？   可以。
         7、怎么共享？  conftest.py
         8、如何与用例关联起来呢？  @pytest.mark.usefixtures("fixture函数名称")
         9、用例如何使用fixture创建的变量or数据？ 函数名称作为用例的参数
         10、神奇的操作吗？  fixture之间"继承""共享"
             base_fixture  -》  first_fixture  -》 third_fixture
                           -》  second_fixture
         11、"共享"有限制吗？有范围吗？  有的。仅限它所在的目录及后代目录。
         12、fixture之间"继承"有没有级别限制？？  有的。只能小的继承大的 或者 平辈。


如何在运行时根据需求来筛选用例 ？冒烟的用例？
标记功能。 3步曲。

如何来实现ddt??
@pytest.mark.parametrize


需要安装pytest - html插件。

pytest可以生成多种样式的结果：
1. 生成JunitXML 格式的测试报告：命令：--junitxml=path
2. 生成result log格式的测试报告：命令：--resultlog=report\log.txt
3. 生成Html格式的测试报告：命令：--html=report\test_one_func.html(相对路径 )


allure报告：
c
 https://www.cnblogs.com/Simple-Small/p/11512337.html

 1、安装allure工具
 2、让pytests生成allure能够识别的测试结果文件。
 3、运行allure将测试结果展示出来。
    allure serve allure报告路径

jenkins持续集成
200个用例 -- 2个月 -- 10 -20 -30 - 40 -- 持续的过程。

1、jenkins服务器 - linux - 纯命令版本。可以装浏览器?
2、UI自动化的脚本 - windows

怎么在jenkins上来执行Ui自动化脚本呢？？
1）你的服务器是不可以运行的。
master(主/领导) - Slave（从/小弟）
linux              windows

1个master(创建任务/安排任务/关注任务进度/部门级管理/小弟管理/执行任务)
VS
多个小弟Slave(向领导报到-执行任务-反馈结果)。

1）是不是只有一个jenkins??  只有master上有jenkins。jenkins具备管理功能。
2）master和slave可以是同一个电脑吗？ 领导和小弟是同一个人？--- master/Slave模式不支持。


小弟报道之前，主机得先准备一个位置给小弟&要求。
1、名称
2、	并发构建数：小弟的能力。
3、远程工作目录：1）脚本？2）脚本的环境？ 3）脚本放在哪里？
4、标签: 分类。


1台主机(管理工具-java/allure)  ----- (java的安装目录/allure安装目录/git目录)   -----多台小弟(工具目录)
                                不同的任务，需要不同的工具环境。jdk1.8,jdk1.11

主机工具配置：全局工具配置当中的设定目录。
小弟机工具路径配置：小弟机节点上，配置工具目录。

*************************************   阶段总结  ***************************************
1）准备阶段：selenium环境安装？原理？html+dom??
   python客户端  --  XXxdriver的服务端 -- 调用浏览器原生api操作浏览器。
   python客户端与driver是http通信，每一个api都是一个http请求。
   协议全称：jsonWireprotocol。访问url就是一个接口，find_element就是一个接口。json格式。

2）基础阶段：元素定位、元素操作。
   定位：id,class,tag_name,name,link,partial_link
         xpath,css
         xpath: //标签名[@属性=值 and text()=值 and contains(@属性/text(),值)]
                层级：//祖先元素//后代元素//....
                     轴定位：？？

   操作：3大元素等待(sleep, implicity_wait, WebdriverWait+expected_condition)
        3大切换：iframe\alert\windows   switch_to.XXX
        鼠标、键盘操作：ActionChains    Keys
        js操作：execute_script(js语句，要传进js的参数)  # js里的函数参数的双引号丢了。var变量声明；
              1) 滚动条；2）日期框 3）修改value属性
        下拉列表：Select类，非Select类。
        上传操作：固定脚本。
        弹框：alert,和非Alert

3）

